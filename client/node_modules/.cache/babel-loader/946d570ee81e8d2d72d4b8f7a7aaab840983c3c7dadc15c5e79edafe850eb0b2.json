{"ast":null,"code":"var _jsxFileName = \"/Users/rostyslav/repos/project-wherely/client/src/components/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { collection, getDocs, doc, updateDoc, getDoc, onSnapshot } from 'firebase/firestore';\nimport { ref, getDownloadURL } from 'firebase/storage';\nimport { db, storage } from '../firebase';\nimport Header from './header/Header';\nimport Footer from './footer/Footer';\nimport Main from './main/Main';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const location = useLocation();\n  const currentPath = location.pathname;\n  const [levelsData, setLevelsData] = useState([]);\n  const [currentLevel, setCurrentLevel] = useState(null);\n  const [currentLevelData, setCurrentLevelData] = useState(null);\n  const [currentLevelImg, setCurrentLevelImg] = useState(null);\n  const [originalLevelImgSize, setOriginalLevelImgSize] = useState(null);\n  const [currentLevelItems, setCurrentLevelItems] = useState(null);\n  const [originalClickCoords, setOriginalClickCoords] = useState([]);\n  const [guessShapeCoords, setGuessShapeCoords] = useState([]);\n  const [foundItemsCoords, setFoundItemsCoords] = useState([]);\n  const [foundItemsRelativeCoords, setFoundItemsRelativeCoords] = useState([]);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [showFoundAlert, setShowFoundAlert] = useState(false);\n  const [showNotFoundAlert, setShowNotFoundAlert] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n  const [score, setScore] = useState(null);\n\n  // Retrieve documents from the \"assets\" collection\n  const assetsRef = collection(db, 'assets');\n\n  // This useEffect hook is used to fetch data from a Firestore database and update the storage URLs for assets.\n  useEffect(() => {\n    const updateStorageWithURLs = async () => {\n      try {\n        const assetsSnapshot = await getDocs(assetsRef);\n        assetsSnapshot.forEach(async document => {\n          const data = document.data();\n          const consoleName = data['console-name'];\n          const consoleItems = data.items;\n\n          // Updating console and items images urls\n          const consoleImgPath = `${consoleName.toLowerCase()}/${consoleName.toLowerCase()}.jpg`;\n          const consoleImgStorageRef = ref(storage, consoleImgPath);\n          const consoleImageURL = await getDownloadURL(consoleImgStorageRef);\n          const consoleDocRef = doc(db, 'assets', consoleName.toLowerCase());\n          for (const itemMapName of Object.keys(consoleItems)) {\n            const itemImgPath = `${consoleName.toLowerCase()}/items/${itemMapName}.png`;\n            const itemImgRef = ref(storage, itemImgPath);\n            const itemImgURL = await getDownloadURL(itemImgRef);\n            const updatedDoc = {\n              ...data,\n              'console-image-url': consoleImageURL,\n              items: {\n                ...consoleItems,\n                [`${itemMapName}`]: {\n                  ...consoleItems[itemMapName],\n                  url: itemImgURL\n                }\n              }\n            };\n            await updateDoc(consoleDocRef, updatedDoc);\n          }\n        });\n      } catch (error) {\n        console.error('Firestore update error:', error);\n      }\n    };\n    const fetchAssets = async () => {\n      const assetsSnapshot = await getDocs(assetsRef);\n      assetsSnapshot.forEach(doc => {\n        setLevelsData(prevState => {\n          return [...prevState, {\n            name: doc.data()['console-name'],\n            url: doc.data()['console-image-url'],\n            items: doc.data()['items'],\n            size: doc.data()['size']\n          }];\n        });\n      });\n    };\n    const loadData = async () => {\n      await updateStorageWithURLs();\n      await fetchAssets();\n    };\n    loadData();\n    return () => {\n      setLevelsData([]);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Responsible for initializing the current level from local storage.\n  useEffect(() => {\n    const currentLevel = window.localStorage.getItem('currentLevel');\n    if (currentLevel) {\n      setCurrentLevel(JSON.parse(currentLevel));\n    }\n  }, []);\n\n  // Responsible for updating the current level in local storage whenever it changes.\n  useEffect(() => {\n    window.localStorage.setItem('currentLevel', JSON.stringify(currentLevel));\n  }, [currentLevel]);\n\n  // Helper function to calculate relative coordinates\n  const getRelativeCoords = (originalCoordsArr, originalImgSizeArr) => {\n    const [originalX, originalY] = originalCoordsArr;\n    const [originalWidth, originalHeight] = originalImgSizeArr;\n    const offsetX = originalX / originalWidth * windowWidth;\n    const offsetY = originalY / originalHeight * windowWidth;\n    return [offsetX, offsetY];\n  };\n\n  // Responsible for updating the window width state whenever the browser window is resized.\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Responsible for finding and setting the current level data based on the currentLevel state and levelsData array.\n  useEffect(() => {\n    const newCurrentLevelData = levelsData.find(level => level.name.toLowerCase() === currentLevel);\n    setCurrentLevelData(newCurrentLevelData);\n  }, [levelsData, currentLevel]);\n\n  // Responsible for updating various states based on the currentLevelData.\n  useEffect(() => {\n    if (currentLevelData) {\n      setCurrentLevelImg(currentLevelData.url);\n      setOriginalLevelImgSize(currentLevelData.size);\n      setCurrentLevelItems(currentLevelData.items);\n    }\n  }, [currentLevelData]);\n\n  // Responsible for updating the guess shape coordinates based on the currentLevelData and the window width.\n  useEffect(() => {\n    if (currentLevelData) {\n      setGuessShapeCoords(getRelativeCoords(originalClickCoords, currentLevelData.size));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [windowWidth]);\n\n  // Responsible for updating the relative coordinates of found items based on the foundItemsCoords, originalLevelImgSize, and the window width.\n  useEffect(() => {\n    if (foundItemsCoords.length !== 0) {\n      const updatedRelativeCoords = [];\n      foundItemsCoords.forEach(coord => {\n        updatedRelativeCoords.push(getRelativeCoords(coord, originalLevelImgSize));\n      });\n      setFoundItemsRelativeCoords(updatedRelativeCoords);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [foundItemsCoords, windowWidth]);\n  const handleImageClick = event => {\n    // Update original click coords\n    const {\n      offsetX,\n      offsetY\n    } = event.nativeEvent;\n    const {\n      naturalWidth,\n      naturalHeight\n    } = event.target;\n    const originalX = offsetX / windowWidth * naturalWidth;\n    const originalY = offsetY / windowWidth * naturalHeight;\n    setOriginalClickCoords([originalX, originalY]);\n\n    // Update the shapes state with the new shape\n    setGuessShapeCoords(getRelativeCoords([originalX, originalY], [naturalWidth, naturalHeight]));\n  };\n  const [levelIsCompleted, setLevelIsCompleted] = useState(false);\n  const [winnerName, setWinnerName] = useState('');\n  const [leaderboardData, setLeaderboardData] = useState([]);\n  const [selectedLeaderboardLevel, setSelectedLeaderboardLevel] = useState('dreamcast');\n  useEffect(() => {\n    const leaderboardRef = collection(db, 'leaderboard');\n    const unsubscribe = onSnapshot(leaderboardRef, snapshot => {\n      const updatedData = {};\n      snapshot.forEach(doc => {\n        const consoleName = doc.id;\n        updatedData[consoleName] = doc.data();\n      });\n      setLeaderboardData(updatedData);\n    });\n    return () => unsubscribe();\n  }, []);\n  const handleWinnerNameChange = e => {\n    setWinnerName(e.target.value);\n  };\n  const updateLeaderBoard = async () => {\n    try {\n      const levelDocRef = doc(db, 'leaderboard', currentLevel);\n      const levelDocSnap = await getDoc(levelDocRef);\n      if (levelDocSnap.exists()) {\n        const levelData = levelDocSnap.data();\n        const updatedLevelDoc = {\n          ...levelData,\n          [winnerName]: score\n        };\n        await updateDoc(levelDocRef, updatedLevelDoc);\n      } else {\n        console.log('Level document does not exist');\n      }\n    } catch (error) {\n      console.error('Error retrieving level data:', error);\n    }\n  };\n  const handleLeaderBoardLevelSelection = levelName => {\n    setSelectedLeaderboardLevel(levelName);\n  };\n  const handleLevelItemClick = name => {\n    const levelMapName = name.toLowerCase().replace(/\\s+/g, '-');\n    const originalItemCoords = currentLevelItems[levelMapName].coords;\n    const relativeItemCoords = getRelativeCoords(originalItemCoords, originalLevelImgSize);\n    if (guessShapeCoords[0] <= relativeItemCoords[0] + 50 && guessShapeCoords[0] >= relativeItemCoords[0] - 50 && guessShapeCoords[1] <= relativeItemCoords[1] + 50 && guessShapeCoords[1] >= relativeItemCoords[1] - 50) {\n      setCurrentLevelItems(prevState => {\n        const updatedState = {\n          ...prevState\n        };\n        delete updatedState[levelMapName];\n        // Check if the level is completed\n        if (Object.keys(updatedState).length === 0) {\n          setLevelIsCompleted(true);\n        }\n        return updatedState;\n      });\n      setFoundItemsCoords(prevState => {\n        return [...prevState, originalItemCoords];\n      });\n      setShowFoundAlert(true);\n      setTimeout(() => {\n        setShowFoundAlert(false);\n      }, 2500);\n    } else {\n      setShowNotFoundAlert(true);\n      setTimeout(() => {\n        setShowNotFoundAlert(false);\n      }, 2500);\n    }\n    setGuessShapeCoords([]);\n  };\n  useEffect(() => {\n    if (levelIsCompleted) {\n      setScore(seconds);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [levelIsCompleted]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      currentPath: currentPath,\n      currentLevelItems: currentLevelItems,\n      seconds: seconds,\n      setSeconds: setSeconds,\n      levelIsCompleted: levelIsCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Main, {\n      levelsData: levelsData,\n      currentLevel: currentLevel,\n      setCurrentLevel: setCurrentLevel,\n      handleImageClick: handleImageClick,\n      guessShapeCoords: guessShapeCoords,\n      setGuessShapeCoords: setGuessShapeCoords,\n      currentLevelImg: currentLevelImg,\n      currentLevelItems: currentLevelItems,\n      handleLevelItemClick: handleLevelItemClick,\n      foundItemsRelativeCoords: foundItemsRelativeCoords,\n      setFoundItemsRelativeCoords: setFoundItemsRelativeCoords,\n      setFoundItemsCoords: setFoundItemsCoords,\n      showFoundAlert: showFoundAlert,\n      showNotFoundAlert: showNotFoundAlert,\n      setSeconds: setSeconds,\n      levelIsCompleted: levelIsCompleted,\n      setLevelIsCompleted: setLevelIsCompleted,\n      score: score,\n      winnerName: winnerName,\n      setWinnerName: setWinnerName,\n      handleWinnerNameChange: handleWinnerNameChange,\n      updateLeaderBoard: updateLeaderBoard,\n      leaderboardData: leaderboardData,\n      selectedLeaderboardLevel: selectedLeaderboardLevel,\n      handleLeaderBoardLevelSelection: handleLeaderBoardLevelSelection,\n      setSelectedLeaderboardLevel: setSelectedLeaderboardLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"QdsFT319qvfLiltdrUFwwGGqv0U=\", false, function () {\n  return [useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","useLocation","collection","getDocs","doc","updateDoc","getDoc","onSnapshot","ref","getDownloadURL","db","storage","Header","Footer","Main","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","location","currentPath","pathname","levelsData","setLevelsData","currentLevel","setCurrentLevel","currentLevelData","setCurrentLevelData","currentLevelImg","setCurrentLevelImg","originalLevelImgSize","setOriginalLevelImgSize","currentLevelItems","setCurrentLevelItems","originalClickCoords","setOriginalClickCoords","guessShapeCoords","setGuessShapeCoords","foundItemsCoords","setFoundItemsCoords","foundItemsRelativeCoords","setFoundItemsRelativeCoords","windowWidth","setWindowWidth","window","innerWidth","showFoundAlert","setShowFoundAlert","showNotFoundAlert","setShowNotFoundAlert","seconds","setSeconds","score","setScore","assetsRef","updateStorageWithURLs","assetsSnapshot","forEach","document","data","consoleName","consoleItems","items","consoleImgPath","toLowerCase","consoleImgStorageRef","consoleImageURL","consoleDocRef","itemMapName","Object","keys","itemImgPath","itemImgRef","itemImgURL","updatedDoc","url","error","console","fetchAssets","prevState","name","size","loadData","localStorage","getItem","JSON","parse","setItem","stringify","getRelativeCoords","originalCoordsArr","originalImgSizeArr","originalX","originalY","originalWidth","originalHeight","offsetX","offsetY","handleResize","addEventListener","removeEventListener","newCurrentLevelData","find","level","length","updatedRelativeCoords","coord","push","handleImageClick","event","nativeEvent","naturalWidth","naturalHeight","target","levelIsCompleted","setLevelIsCompleted","winnerName","setWinnerName","leaderboardData","setLeaderboardData","selectedLeaderboardLevel","setSelectedLeaderboardLevel","leaderboardRef","unsubscribe","snapshot","updatedData","id","handleWinnerNameChange","e","value","updateLeaderBoard","levelDocRef","levelDocSnap","exists","levelData","updatedLevelDoc","log","handleLeaderBoardLevelSelection","levelName","handleLevelItemClick","levelMapName","replace","originalItemCoords","coords","relativeItemCoords","updatedState","setTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rostyslav/repos/project-wherely/client/src/components/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  collection,\n  getDocs,\n  doc,\n  updateDoc,\n  getDoc,\n  onSnapshot,\n} from 'firebase/firestore';\nimport { ref, getDownloadURL } from 'firebase/storage';\nimport { db, storage } from '../firebase';\n\nimport Header from './header/Header';\nimport Footer from './footer/Footer';\nimport Main from './main/Main';\n\nfunction App() {\n  const location = useLocation();\n  const currentPath = location.pathname;\n  const [levelsData, setLevelsData] = useState([]);\n  const [currentLevel, setCurrentLevel] = useState(null);\n  const [currentLevelData, setCurrentLevelData] = useState(null);\n  const [currentLevelImg, setCurrentLevelImg] = useState(null);\n  const [originalLevelImgSize, setOriginalLevelImgSize] = useState(null);\n  const [currentLevelItems, setCurrentLevelItems] = useState(null);\n  const [originalClickCoords, setOriginalClickCoords] = useState([]);\n  const [guessShapeCoords, setGuessShapeCoords] = useState([]);\n  const [foundItemsCoords, setFoundItemsCoords] = useState([]);\n  const [foundItemsRelativeCoords, setFoundItemsRelativeCoords] = useState([]);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [showFoundAlert, setShowFoundAlert] = useState(false);\n  const [showNotFoundAlert, setShowNotFoundAlert] = useState(false);\n  const [seconds, setSeconds] = useState(0);\n  const [score, setScore] = useState(null);\n\n  // Retrieve documents from the \"assets\" collection\n  const assetsRef = collection(db, 'assets');\n\n  // This useEffect hook is used to fetch data from a Firestore database and update the storage URLs for assets.\n  useEffect(() => {\n    const updateStorageWithURLs = async () => {\n      try {\n        const assetsSnapshot = await getDocs(assetsRef);\n\n        assetsSnapshot.forEach(async (document) => {\n          const data = document.data();\n          const consoleName = data['console-name'];\n          const consoleItems = data.items;\n\n          // Updating console and items images urls\n          const consoleImgPath = `${consoleName.toLowerCase()}/${consoleName.toLowerCase()}.jpg`;\n          const consoleImgStorageRef = ref(storage, consoleImgPath);\n          const consoleImageURL = await getDownloadURL(consoleImgStorageRef);\n          const consoleDocRef = doc(db, 'assets', consoleName.toLowerCase());\n\n          for (const itemMapName of Object.keys(consoleItems)) {\n            const itemImgPath = `${consoleName.toLowerCase()}/items/${itemMapName}.png`;\n            const itemImgRef = ref(storage, itemImgPath);\n            const itemImgURL = await getDownloadURL(itemImgRef);\n            const updatedDoc = {\n              ...data,\n              'console-image-url': consoleImageURL,\n              items: {\n                ...consoleItems,\n                [`${itemMapName}`]: {\n                  ...consoleItems[itemMapName],\n                  url: itemImgURL,\n                },\n              },\n            };\n            await updateDoc(consoleDocRef, updatedDoc);\n          }\n        });\n      } catch (error) {\n        console.error('Firestore update error:', error);\n      }\n    };\n\n    const fetchAssets = async () => {\n      const assetsSnapshot = await getDocs(assetsRef);\n\n      assetsSnapshot.forEach((doc) => {\n        setLevelsData((prevState) => {\n          return [\n            ...prevState,\n            {\n              name: doc.data()['console-name'],\n              url: doc.data()['console-image-url'],\n              items: doc.data()['items'],\n              size: doc.data()['size'],\n            },\n          ];\n        });\n      });\n    };\n\n    const loadData = async () => {\n      await updateStorageWithURLs();\n      await fetchAssets();\n    };\n\n    loadData();\n\n    return () => {\n      setLevelsData([]);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Responsible for initializing the current level from local storage.\n  useEffect(() => {\n    const currentLevel = window.localStorage.getItem('currentLevel');\n    if (currentLevel) {\n      setCurrentLevel(JSON.parse(currentLevel));\n    }\n  }, []);\n\n  // Responsible for updating the current level in local storage whenever it changes.\n  useEffect(() => {\n    window.localStorage.setItem('currentLevel', JSON.stringify(currentLevel));\n  }, [currentLevel]);\n\n  // Helper function to calculate relative coordinates\n  const getRelativeCoords = (originalCoordsArr, originalImgSizeArr) => {\n    const [originalX, originalY] = originalCoordsArr;\n    const [originalWidth, originalHeight] = originalImgSizeArr;\n    const offsetX = (originalX / originalWidth) * windowWidth;\n    const offsetY = (originalY / originalHeight) * windowWidth;\n    return [offsetX, offsetY];\n  };\n\n  // Responsible for updating the window width state whenever the browser window is resized.\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Responsible for finding and setting the current level data based on the currentLevel state and levelsData array.\n  useEffect(() => {\n    const newCurrentLevelData = levelsData.find(\n      (level) => level.name.toLowerCase() === currentLevel\n    );\n    setCurrentLevelData(newCurrentLevelData);\n  }, [levelsData, currentLevel]);\n\n  // Responsible for updating various states based on the currentLevelData.\n  useEffect(() => {\n    if (currentLevelData) {\n      setCurrentLevelImg(currentLevelData.url);\n      setOriginalLevelImgSize(currentLevelData.size);\n      setCurrentLevelItems(currentLevelData.items);\n    }\n  }, [currentLevelData]);\n\n  // Responsible for updating the guess shape coordinates based on the currentLevelData and the window width.\n  useEffect(() => {\n    if (currentLevelData) {\n      setGuessShapeCoords(\n        getRelativeCoords(originalClickCoords, currentLevelData.size)\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [windowWidth]);\n\n  // Responsible for updating the relative coordinates of found items based on the foundItemsCoords, originalLevelImgSize, and the window width.\n  useEffect(() => {\n    if (foundItemsCoords.length !== 0) {\n      const updatedRelativeCoords = [];\n      foundItemsCoords.forEach((coord) => {\n        updatedRelativeCoords.push(\n          getRelativeCoords(coord, originalLevelImgSize)\n        );\n      });\n      setFoundItemsRelativeCoords(updatedRelativeCoords);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [foundItemsCoords, windowWidth]);\n\n  const handleImageClick = (event) => {\n    // Update original click coords\n    const { offsetX, offsetY } = event.nativeEvent;\n    const { naturalWidth, naturalHeight } = event.target;\n\n    const originalX = (offsetX / windowWidth) * naturalWidth;\n    const originalY = (offsetY / windowWidth) * naturalHeight;\n\n    setOriginalClickCoords([originalX, originalY]);\n\n    // Update the shapes state with the new shape\n    setGuessShapeCoords(\n      getRelativeCoords([originalX, originalY], [naturalWidth, naturalHeight])\n    );\n  };\n\n  const [levelIsCompleted, setLevelIsCompleted] = useState(false);\n  const [winnerName, setWinnerName] = useState('');\n\n  const [leaderboardData, setLeaderboardData] = useState([]);\n  const [selectedLeaderboardLevel, setSelectedLeaderboardLevel] =\n    useState('dreamcast');\n\n  useEffect(() => {\n    const leaderboardRef = collection(db, 'leaderboard');\n    const unsubscribe = onSnapshot(leaderboardRef, (snapshot) => {\n      const updatedData = {};\n\n      snapshot.forEach((doc) => {\n        const consoleName = doc.id;\n        updatedData[consoleName] = doc.data();\n      });\n\n      setLeaderboardData(updatedData);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleWinnerNameChange = (e) => {\n    setWinnerName(e.target.value);\n  };\n\n  const updateLeaderBoard = async () => {\n    try {\n      const levelDocRef = doc(db, 'leaderboard', currentLevel);\n      const levelDocSnap = await getDoc(levelDocRef);\n\n      if (levelDocSnap.exists()) {\n        const levelData = levelDocSnap.data();\n        const updatedLevelDoc = {\n          ...levelData,\n          [winnerName]: score,\n        };\n        await updateDoc(levelDocRef, updatedLevelDoc);\n      } else {\n        console.log('Level document does not exist');\n      }\n    } catch (error) {\n      console.error('Error retrieving level data:', error);\n    }\n  };\n\n  const handleLeaderBoardLevelSelection = (levelName) => {\n    setSelectedLeaderboardLevel(levelName);\n  };\n\n  const handleLevelItemClick = (name) => {\n    const levelMapName = name.toLowerCase().replace(/\\s+/g, '-');\n    const originalItemCoords = currentLevelItems[levelMapName].coords;\n    const relativeItemCoords = getRelativeCoords(\n      originalItemCoords,\n      originalLevelImgSize\n    );\n    if (\n      guessShapeCoords[0] <= relativeItemCoords[0] + 50 &&\n      guessShapeCoords[0] >= relativeItemCoords[0] - 50 &&\n      guessShapeCoords[1] <= relativeItemCoords[1] + 50 &&\n      guessShapeCoords[1] >= relativeItemCoords[1] - 50\n    ) {\n      setCurrentLevelItems((prevState) => {\n        const updatedState = { ...prevState };\n        delete updatedState[levelMapName];\n        // Check if the level is completed\n        if (Object.keys(updatedState).length === 0) {\n          setLevelIsCompleted(true);\n        }\n        return updatedState;\n      });\n      setFoundItemsCoords((prevState) => {\n        return [...prevState, originalItemCoords];\n      });\n      setShowFoundAlert(true);\n      setTimeout(() => {\n        setShowFoundAlert(false);\n      }, 2500);\n    } else {\n      setShowNotFoundAlert(true);\n      setTimeout(() => {\n        setShowNotFoundAlert(false);\n      }, 2500);\n    }\n    setGuessShapeCoords([]);\n  };\n\n  useEffect(() => {\n    if (levelIsCompleted) {\n      setScore(seconds);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [levelIsCompleted]);\n\n  return (\n    <>\n      <Header\n        currentPath={currentPath}\n        currentLevelItems={currentLevelItems}\n        seconds={seconds}\n        setSeconds={setSeconds}\n        levelIsCompleted={levelIsCompleted}\n      />\n      <Main\n        levelsData={levelsData}\n        currentLevel={currentLevel}\n        setCurrentLevel={setCurrentLevel}\n        handleImageClick={handleImageClick}\n        guessShapeCoords={guessShapeCoords}\n        setGuessShapeCoords={setGuessShapeCoords}\n        currentLevelImg={currentLevelImg}\n        currentLevelItems={currentLevelItems}\n        handleLevelItemClick={handleLevelItemClick}\n        foundItemsRelativeCoords={foundItemsRelativeCoords}\n        setFoundItemsRelativeCoords={setFoundItemsRelativeCoords}\n        setFoundItemsCoords={setFoundItemsCoords}\n        showFoundAlert={showFoundAlert}\n        showNotFoundAlert={showNotFoundAlert}\n        setSeconds={setSeconds}\n        levelIsCompleted={levelIsCompleted}\n        setLevelIsCompleted={setLevelIsCompleted}\n        score={score}\n        winnerName={winnerName}\n        setWinnerName={setWinnerName}\n        handleWinnerNameChange={handleWinnerNameChange}\n        updateLeaderBoard={updateLeaderBoard}\n        leaderboardData={leaderboardData}\n        selectedLeaderboardLevel={selectedLeaderboardLevel}\n        handleLeaderBoardLevelSelection={handleLeaderBoardLevelSelection}\n        setSelectedLeaderboardLevel={setSelectedLeaderboardLevel}\n      />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}